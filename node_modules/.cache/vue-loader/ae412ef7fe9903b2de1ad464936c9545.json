{"remainingRequest":"/home/holwech/code/draw/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/holwech/code/draw/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/holwech/code/draw/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/holwech/code/draw/src/components/DrawingBoard.vue?vue&type=template&id=6fb44d98&scoped=true&","dependencies":[{"path":"/home/holwech/code/draw/src/components/DrawingBoard.vue","mtime":1548528997706},{"path":"/home/holwech/code/draw/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _c(\"h1\", [_vm._v(_vm._s(_vm.msg))]),\n    _c(\"div\", { attrs: { id: \"divSmoothingFactor\" } }, [\n      _c(\"label\", { attrs: { for: \"cmbBufferSize\" } }, [\n        _vm._v(\"Buffer size:\")\n      ]),\n      _c(\n        \"select\",\n        {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.smoothness,\n              expression: \"smoothness\"\n            }\n          ],\n          attrs: { id: \"cmbBufferSize\" },\n          on: {\n            change: [\n              function($event) {\n                var $$selectedVal = Array.prototype.filter\n                  .call($event.target.options, function(o) {\n                    return o.selected\n                  })\n                  .map(function(o) {\n                    var val = \"_value\" in o ? o._value : o.value\n                    return val\n                  })\n                _vm.smoothness = $event.target.multiple\n                  ? $$selectedVal\n                  : $$selectedVal[0]\n              },\n              _vm.setStrokeProperties\n            ]\n          }\n        },\n        [\n          _c(\"option\", { attrs: { value: \"1\" } }, [_vm._v(\"1 - No smoothing\")]),\n          _c(\"option\", { attrs: { value: \"4\" } }, [_vm._v(\"4 - Sharp curves\")]),\n          _c(\"option\", { attrs: { value: \"8\", selected: \"selected\" } }, [\n            _vm._v(\"8 - Smooth curves\")\n          ]),\n          _c(\"option\", { attrs: { value: \"12\" } }, [\n            _vm._v(\"12 - Very smooth curves\")\n          ]),\n          _c(\"option\", { attrs: { value: \"16\" } }, [\n            _vm._v(\"16 - Super smooth curves\")\n          ]),\n          _c(\"option\", { attrs: { value: \"20\" } }, [\n            _vm._v(\"20 - Hyper smooth curves\")\n          ])\n        ]\n      )\n    ]),\n    _c(\"div\", { attrs: { id: \"divStrokeWidth\" } }, [\n      _c(\"label\", { attrs: { for: \"strokeWidth\" } }, [_vm._v(\"Stroke width:\")]),\n      _c(\n        \"select\",\n        {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.width,\n              expression: \"width\"\n            }\n          ],\n          attrs: { id: \"strokeWidth\" },\n          on: {\n            change: [\n              function($event) {\n                var $$selectedVal = Array.prototype.filter\n                  .call($event.target.options, function(o) {\n                    return o.selected\n                  })\n                  .map(function(o) {\n                    var val = \"_value\" in o ? o._value : o.value\n                    return val\n                  })\n                _vm.width = $event.target.multiple\n                  ? $$selectedVal\n                  : $$selectedVal[0]\n              },\n              _vm.setStrokeProperties\n            ]\n          }\n        },\n        [\n          _c(\"option\", { attrs: { value: \"1\" } }, [_vm._v(\"1\")]),\n          _c(\"option\", { attrs: { value: \"2\", selected: \"selected\" } }, [\n            _vm._v(\"2\")\n          ]),\n          _c(\"option\", { attrs: { value: \"4\" } }, [_vm._v(\"4\")]),\n          _c(\"option\", { attrs: { value: \"6\" } }, [_vm._v(\"6\")]),\n          _c(\"option\", { attrs: { value: \"8\" } }, [_vm._v(\"8\")])\n        ]\n      )\n    ]),\n    _c(\"div\", { attrs: { id: \"divColorSelect\" } }, [\n      _c(\"label\", { attrs: { for: \"strokeColor\" } }, [_vm._v(\"Stroke color:\")]),\n      _c(\n        \"select\",\n        {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.color,\n              expression: \"color\"\n            }\n          ],\n          attrs: { id: \"strokeColor\" },\n          on: {\n            change: [\n              function($event) {\n                var $$selectedVal = Array.prototype.filter\n                  .call($event.target.options, function(o) {\n                    return o.selected\n                  })\n                  .map(function(o) {\n                    var val = \"_value\" in o ? o._value : o.value\n                    return val\n                  })\n                _vm.color = $event.target.multiple\n                  ? $$selectedVal\n                  : $$selectedVal[0]\n              },\n              _vm.setStrokeProperties\n            ]\n          }\n        },\n        [\n          _c(\"option\", { attrs: { value: \"black\", selected: \"selected\" } }, [\n            _vm._v(\"Black\")\n          ]),\n          _c(\"option\", { attrs: { value: \"blue\" } }, [_vm._v(\"Blue\")]),\n          _c(\"option\", { attrs: { value: \"red\" } }, [_vm._v(\"Red\")]),\n          _c(\"option\", { attrs: { value: \"green\" } }, [_vm._v(\"Green\")])\n        ]\n      )\n    ]),\n    _c(\"svg\", {\n      attrs: {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\",\n        version: \"1.1\",\n        id: \"svgElement\",\n        x: \"0px\",\n        y: \"0px\",\n        width: \"1200px\",\n        height: \"800px\",\n        viewBox: \"0 0 1200 800\",\n        \"enable-background\": \"new 0 0 1200 800\",\n        \"xml:space\": \"preserve\"\n      }\n    }),\n    _c(\"button\", { on: { click: _vm.clear } }, [_vm._v(\"Clear\")]),\n    _c(\"button\", { on: { click: _vm.pan } }, [\n      _vm._v(\"Pan \" + _vm._s(_vm.panModeText))\n    ]),\n    _c(\"button\", { on: { click: _vm.zoomIn } }, [_vm._v(\"Zoom in\")]),\n    _c(\"button\", { on: { click: _vm.zoomOut } }, [_vm._v(\"Zoom out\")])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}