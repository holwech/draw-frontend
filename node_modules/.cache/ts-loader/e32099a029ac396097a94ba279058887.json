{"remainingRequest":"/home/holwech/code/draw/node_modules/babel-loader/lib/index.js!/home/holwech/code/draw/node_modules/ts-loader/index.js??ref--13-2!/home/holwech/code/draw/src/draw/board/BoardController.ts","dependencies":[{"path":"/home/holwech/code/draw/src/draw/board/BoardController.ts","mtime":1552931256192},{"path":"/home/holwech/code/draw/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/ts-loader/index.js","mtime":1540965372000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport _classCallCheck from \"/home/holwech/code/draw/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/holwech/code/draw/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SVGDraw } from './SVGDraw';\nimport { Transform } from './Transform';\nimport { BoardState, EventType } from '../utils/boardInterfaces';\nvar SCALE_FACTOR = 0.05;\nexport var BoardController =\n/*#__PURE__*/\nfunction () {\n  function BoardController(svgElement, app) {\n    var _this = this;\n\n    var initialState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, BoardController);\n\n    // State properties\n    this.scale = 1;\n    this.state = BoardState.DRAW;\n    this.strokeProps = {\n      color: 'green',\n      width: 50,\n      bufferSize: 20\n    };\n    this.viewBox = {\n      x: 0,\n      y: 0,\n      width: 1200,\n      height: 800\n    };\n    this.svg = svgElement;\n    this.app = app;\n    this.draw = new SVGDraw(this.svg);\n    this.transform = new Transform(this.svg);\n    initialState.forEach(function (event) {\n      _this.execute(event);\n    });\n  }\n\n  _createClass(BoardController, [{\n    key: \"execute\",\n    value: function execute(event) {\n      switch (event.eventType) {\n        case EventType.POINTER_MOVE:\n          this.onPointerMove(event.e);\n          break;\n\n        case EventType.POINTER_DOWN:\n          this.onPointerDown(event.e);\n          break;\n\n        case EventType.POINTER_UP:\n          this.onPointerUp();\n          break;\n\n        case EventType.SET_STROKE_PROPS:\n          this.setStrokeProperties(event.strokeProps);\n          break;\n\n        case EventType.ONWHEEL:\n          this.onWheel(event.e);\n          break;\n\n        case EventType.CLEAR:\n          this.clear();\n          break;\n\n        case EventType.SET_STATE:\n          this.setState(event.state);\n          break;\n\n        case EventType.SET_VIEWBOX:\n          this.setViexBox(event.viewBox);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(state) {\n      this.state = state;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.draw.clear();\n    }\n  }, {\n    key: \"setStrokeProperties\",\n    value: function setStrokeProperties(strokeProps) {\n      this.strokeProps.bufferSize = strokeProps.bufferSize;\n      this.strokeProps.color = strokeProps.color;\n      this.strokeProps.width = strokeProps.width * this.scale;\n    }\n  }, {\n    key: \"setViexBox\",\n    value: function setViexBox(viexBox) {\n      this.viewBox = viexBox;\n    }\n  }, {\n    key: \"onWheel\",\n    value: function onWheel(e) {\n      e.preventDefault();\n\n      if (this.state === BoardState.PAN) {\n        var scale = e.deltaY > 0 ? 1 + SCALE_FACTOR : 1 - SCALE_FACTOR;\n        this.strokeProps.width = this.strokeProps.width * scale;\n        var point = this.getPointerPosition(e);\n        this.transform.onWheel(point, this.viewBox, scale);\n        this.scale *= scale;\n      }\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(e) {\n      e.preventDefault();\n      var point = this.getPointerPosition(e);\n\n      switch (this.state) {\n        case BoardState.DRAW:\n          this.draw.onPointerDown(point, this.strokeProps);\n          break;\n\n        case BoardState.PAN:\n          this.transform.onPointerDown(point);\n          break;\n\n        default:\n          throw new Error('No state ' + this.state + ' in onPointerDown');\n      }\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(e) {\n      e.preventDefault();\n      var point = this.getPointerPosition(e);\n\n      switch (this.state) {\n        case BoardState.DRAW:\n          this.draw.onPointerMove(point, this.strokeProps.bufferSize);\n          break;\n\n        case BoardState.PAN:\n          this.transform.onPointerMove(point, this.viewBox);\n          break;\n\n        default:\n          throw new Error('Not state ' + this.state + ' in onPointerMove');\n      }\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp() {\n      switch (this.state) {\n        case BoardState.DRAW:\n          this.draw.onPointerUp();\n          break;\n\n        case BoardState.PAN:\n          this.transform.onPointerUp();\n          break;\n\n        default:\n          throw new Error('Not state ' + this.state + ' in onPointerUp');\n      }\n    }\n  }, {\n    key: \"getPointerPosition\",\n    value: function getPointerPosition(e) {\n      var svgPoint = this.svg.createSVGPoint();\n      svgPoint.x = e.clientX;\n      svgPoint.y = e.clientY; // Null check is done in constructor\n\n      return svgPoint.matrixTransform(this.svg.getScreenCTM().inverse());\n    }\n  }]);\n\n  return BoardController;\n}();",{"version":3,"sources":["/home/holwech/code/draw/src/draw/board/BoardController.ts"],"names":[],"mappings":"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","sourcesContent":["import { SVGDraw } from './SVGDraw';\nimport { Transform } from './Transform';\nimport { IStrokeProps, IViewBox, BoardState, IEvent, EventType } from '../utils/boardInterfaces';\nimport { AppController } from '../AppController';\n\nconst SCALE_FACTOR = 0.05;\n\nexport class BoardController {\n  // State properties\n  private scale = 1;\n  private state = BoardState.DRAW;\n  private app: AppController;\n  private strokeProps: IStrokeProps = {\n    color: 'green',\n    width: 50,\n    bufferSize: 20,\n  };\n  private viewBox: IViewBox = {\n    x: 0, y: 0, width: 1200, height: 800,\n  };\n\n  private svg: HTMLElement & SVGElement & SVGSVGElement;\n  private draw: SVGDraw;\n  private transform: Transform;\n\n  constructor(\n    svgElement: HTMLElement & SVGElement & SVGSVGElement,\n    app: AppController,\n    initialState: IEvent[] = [],\n  ) {\n    this.svg = svgElement;\n    this.app = app;\n    this.draw = new SVGDraw(this.svg);\n    this.transform = new Transform(this.svg);\n    initialState.forEach((event) => {\n      this.execute(event);\n    });\n  }\n\n  public execute(event: IEvent): void {\n    switch (event.eventType) {\n      case EventType.POINTER_MOVE:\n        this.onPointerMove(event.e!);\n        break;\n      case EventType.POINTER_DOWN:\n        this.onPointerDown(event.e!);\n        break;\n      case EventType.POINTER_UP:\n        this.onPointerUp();\n        break;\n      case EventType.SET_STROKE_PROPS:\n        this.setStrokeProperties(event.strokeProps!);\n        break;\n      case EventType.ONWHEEL:\n        this.onWheel(event.e as WheelEvent);\n        break;\n      case EventType.CLEAR:\n        this.clear();\n        break;\n      case EventType.SET_STATE:\n        this.setState(event.state!);\n        break;\n      case EventType.SET_VIEWBOX:\n        this.setViexBox(event.viewBox!);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private setState(state: BoardState): void {\n    this.state = state;\n  }\n\n  private clear(): void {\n    this.draw.clear();\n  }\n\n  private setStrokeProperties(strokeProps: IStrokeProps): void {\n    this.strokeProps.bufferSize = strokeProps.bufferSize;\n    this.strokeProps.color = strokeProps.color;\n    this.strokeProps.width = strokeProps.width * this.scale;\n  }\n\n  private setViexBox(viexBox: IViewBox): void {\n    this.viewBox = viexBox;\n  }\n\n  private onWheel(e: WheelEvent): void {\n    e.preventDefault();\n    if (this.state === BoardState.PAN) {\n      const scale = e.deltaY > 0 ? 1 + SCALE_FACTOR : 1 - SCALE_FACTOR;\n      this.strokeProps.width = this.strokeProps.width * scale;\n      const point = this.getPointerPosition(e);\n      this.transform.onWheel(point, this.viewBox, scale);\n      this.scale *= scale;\n    }\n  }\n\n  private onPointerDown(e: MouseEvent): void {\n    e.preventDefault();\n    const point = this.getPointerPosition(e);\n    switch (this.state) {\n      case BoardState.DRAW:\n        this.draw.onPointerDown(point, this.strokeProps);\n        break;\n      case BoardState.PAN:\n        this.transform.onPointerDown(point);\n        break;\n      default:\n        throw new Error('No state ' + this.state + ' in onPointerDown');\n    }\n  }\n\n  private onPointerMove(e: MouseEvent): void {\n    e.preventDefault();\n    const point = this.getPointerPosition(e);\n    switch (this.state) {\n      case BoardState.DRAW:\n        this.draw.onPointerMove(point, this.strokeProps.bufferSize);\n        break;\n      case BoardState.PAN:\n        this.transform.onPointerMove(point, this.viewBox);\n        break;\n      default:\n        throw new Error('Not state ' + this.state + ' in onPointerMove');\n    }\n  }\n\n  private onPointerUp(): void {\n    switch (this.state) {\n      case BoardState.DRAW:\n        this.draw.onPointerUp();\n        break;\n      case BoardState.PAN:\n        this.transform.onPointerUp();\n        break;\n      default:\n        throw new Error('Not state ' + this.state + ' in onPointerUp');\n    }\n  }\n\n  private getPointerPosition(e: MouseEvent | WheelEvent): DOMPoint {\n    const svgPoint = this.svg.createSVGPoint();\n    svgPoint.x = e.clientX;\n    svgPoint.y = e.clientY;\n    // Null check is done in constructor\n    return svgPoint.matrixTransform(\n      (this.svg.getScreenCTM() as DOMMatrix).inverse(),\n    );\n  }\n}\n"],"sourceRoot":""}]}