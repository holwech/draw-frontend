{"remainingRequest":"/home/holwech/code/draw/node_modules/babel-loader/lib/index.js!/home/holwech/code/draw/node_modules/ts-loader/index.js??ref--13-2!/home/holwech/code/draw/src/draw/event/EventController.ts","dependencies":[{"path":"/home/holwech/code/draw/src/draw/event/EventController.ts","mtime":1552931256196},{"path":"/home/holwech/code/draw/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/ts-loader/index.js","mtime":1540965372000}],"contextDependencies":[],"result":["import _classCallCheck from \"/home/holwech/code/draw/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/holwech/code/draw/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventType } from '../utils/boardInterfaces';\nimport { ActionType } from '../utils/appInterfaces';\nexport var EventController =\n/*#__PURE__*/\nfunction () {\n  function EventController(svg, app) {\n    var _this = this;\n\n    _classCallCheck(this, EventController);\n\n    this.svg = svg;\n    this.app = app;\n\n    this.onWheel = function (e) {\n      _this.app.dispatchEvent({\n        eventType: EventType.ONWHEEL,\n        e: e\n      });\n    };\n\n    this.onPointerDown = function (e) {\n      _this.app.dispatchEvent({\n        eventType: EventType.POINTER_DOWN,\n        e: e\n      });\n\n      _this.svg.removeEventListener('mousedown', _this.fnOnPointerDown); // Pressing the mouse\n\n\n      _this.svg.addEventListener('mouseup', _this.fnOnPointerUp); // Releasing the mouse\n\n\n      _this.svg.addEventListener('mouseleave', _this.fnOnPointerUp); // Releasing the mouse\n\n\n      _this.svg.addEventListener('mousemove', _this.fnOnPointerMove); // Mouse is moving\n\n    };\n\n    this.onPointerUp = function (e) {\n      _this.app.dispatchEvent({\n        eventType: EventType.POINTER_UP,\n        e: e\n      });\n\n      _this.svg.removeEventListener('mouseup', _this.fnOnPointerUp); // Releasing the mouse\n\n\n      _this.svg.removeEventListener('mouseleave', _this.fnOnPointerUp); // Releasing the mouse\n\n\n      _this.svg.removeEventListener('mousemove', _this.fnOnPointerMove); // Mouse is moving\n\n\n      _this.svg.addEventListener('mousedown', _this.fnOnPointerDown); // Pressing the mouse\n\n    };\n\n    this.onPointerMove = function (e) {\n      _this.app.dispatchEvent({\n        eventType: EventType.POINTER_MOVE,\n        e: e\n      });\n    }; // Event Listeners\n\n\n    this.fnOnWheel = this.onWheel;\n    this.fnOnPointerDown = this.onPointerDown;\n    this.fnOnPointerMove = this.onPointerMove;\n    this.fnOnPointerUp = this.onPointerUp;\n  }\n\n  _createClass(EventController, [{\n    key: \"executeAction\",\n    value: function executeAction(action) {\n      switch (action.action) {\n        case ActionType.RECORD_START:\n          this.svg.addEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n\n          this.svg.addEventListener('wheel', this.fnOnWheel);\n          break;\n\n        case ActionType.RECORD_PAUSE:\n          this.svg.addEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n\n          this.svg.addEventListener('wheel', this.fnOnWheel);\n          break;\n\n        case ActionType.RECORD_STOP:\n          this.svg.removeEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n\n          this.svg.removeEventListener('wheel', this.fnOnWheel);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }]);\n\n  return EventController;\n}();",{"version":3,"sources":["/home/holwech/code/draw/src/draw/event/EventController.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventType } from '../utils/boardInterfaces';\nimport { AppController } from '../AppController';\nimport { IAction, ActionType } from '../utils/appInterfaces';\n\nexport class EventController {\n  // Event functions\n  private fnOnWheel: (e: WheelEvent) => void;\n  private fnOnPointerDown: (e: MouseEvent) => void;\n  private fnOnPointerMove: (e: MouseEvent) => void;\n  private fnOnPointerUp: (e: MouseEvent) => void;\n\n  constructor(\n    private svg: HTMLElement & SVGElement & SVGSVGElement,\n    private app: AppController,\n  ) {\n    // Event Listeners\n    this.fnOnWheel = this.onWheel;\n    this.fnOnPointerDown = this.onPointerDown;\n    this.fnOnPointerMove = this.onPointerMove;\n    this.fnOnPointerUp = this.onPointerUp;\n  }\n\n  public executeAction(action: IAction): void {\n    switch (action.action) {\n      case ActionType.RECORD_START:\n        this.svg.addEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n        this.svg.addEventListener('wheel', this.fnOnWheel);\n        break;\n      case ActionType.RECORD_PAUSE:\n        this.svg.addEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n        this.svg.addEventListener('wheel', this.fnOnWheel);\n        break;\n      case ActionType.RECORD_STOP:\n        this.svg.removeEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n        this.svg.removeEventListener('wheel', this.fnOnWheel);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private onWheel = (e: WheelEvent) => {\n    this.app.dispatchEvent({ eventType: EventType.ONWHEEL, e });\n  }\n\n  private onPointerDown = (e: MouseEvent) => {\n    this.app.dispatchEvent({ eventType: EventType.POINTER_DOWN, e });\n    this.svg.removeEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n    this.svg.addEventListener('mouseup', this.fnOnPointerUp); // Releasing the mouse\n    this.svg.addEventListener('mouseleave', this.fnOnPointerUp); // Releasing the mouse\n    this.svg.addEventListener('mousemove', this.fnOnPointerMove); // Mouse is moving\n  }\n\n  private onPointerUp = (e: MouseEvent) => {\n    this.app.dispatchEvent({ eventType: EventType.POINTER_UP, e });\n    this.svg.removeEventListener('mouseup', this.fnOnPointerUp); // Releasing the mouse\n    this.svg.removeEventListener('mouseleave', this.fnOnPointerUp); // Releasing the mouse\n    this.svg.removeEventListener('mousemove', this.fnOnPointerMove); // Mouse is moving\n    this.svg.addEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n  }\n\n  private onPointerMove = (e: MouseEvent) => {\n    this.app.dispatchEvent({ eventType: EventType.POINTER_MOVE, e });\n  }\n}\n"],"sourceRoot":""}]}