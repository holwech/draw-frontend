{"remainingRequest":"/home/holwech/code/draw/node_modules/babel-loader/lib/index.js!/home/holwech/code/draw/node_modules/ts-loader/index.js??ref--13-2!/home/holwech/code/draw/src/draw/Controller.ts","dependencies":[{"path":"/home/holwech/code/draw/src/draw/Controller.ts","mtime":1550320103251},{"path":"/home/holwech/code/draw/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/ts-loader/index.js","mtime":1540965372000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.bind\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.map\";\nimport _classCallCheck from \"/home/holwech/code/draw/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/holwech/code/draw/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nimport { SVGDraw } from './SVGDraw';\nimport { Transform } from './Transform';\nvar BoardState;\n\n(function (BoardState) {\n  BoardState[\"DRAW\"] = \"DRAW\";\n  BoardState[\"PAN\"] = \"PAN\";\n})(BoardState || (BoardState = {}));\n\nexport var Controller =\n/*#__PURE__*/\nfunction () {\n  function Controller(svgID, style) {\n    _classCallCheck(this, Controller);\n\n    // State properties\n    this.scale = 1;\n    this.state = BoardState.DRAW;\n    this.svg = document.getElementById(svgID);\n    this.draw = new SVGDraw(this.svg);\n    this.transform = new Transform(this.svg);\n    this.strokeStyle = style;\n\n    if (!this.svg.getScreenCTM()) {\n      throw new Error('m variable is not defined in getPointFromViewBox in Transform');\n    }\n\n    var viewboxElem = this.svg.getAttributeNS(null, 'viewBox');\n\n    if (viewboxElem !== null) {\n      var arr = viewboxElem.split(' ').map(Number);\n      this.viewBox = {\n        x: arr[0],\n        y: arr[1],\n        width: arr[2],\n        height: arr[3]\n      };\n    } else {\n      throw new Error('The SVG element requires the view box attribute to be set.');\n    } // Event listeners\n\n\n    this.fnWheel = this.onWheel.bind(this);\n    this.fnOnPointerDown = this.onPointerDown.bind(this);\n    this.fnOnPointerUp = this.onPointerUp.bind(this);\n    this.fnOnPointerMove = this.onPointerMove.bind(this);\n    this.addAllEventListeners();\n  }\n\n  _createClass(Controller, [{\n    key: \"togglePan\",\n    value: function togglePan(toggle) {\n      if (toggle) {\n        this.state = BoardState.PAN;\n      } else {\n        this.state = BoardState.DRAW;\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.draw.clear();\n    }\n  }, {\n    key: \"setStrokeProperties\",\n    value: function setStrokeProperties(color, smoothness, width) {\n      this.strokeStyle.bufferSize = smoothness;\n      this.strokeStyle.color = color;\n      this.strokeStyle.width = width * this.scale;\n    }\n  }, {\n    key: \"addAllEventListeners\",\n    value: function addAllEventListeners() {\n      this.addPointerEventListeners();\n      this.addWheelEventListener();\n    }\n  }, {\n    key: \"removeAllEventListeners\",\n    value: function removeAllEventListeners() {\n      this.removePointerEventListeners();\n      this.removeWheelEventListener();\n    }\n  }, {\n    key: \"addPointerEventListeners\",\n    value: function addPointerEventListeners() {\n      this.svg.addEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n\n      this.svg.addEventListener('mouseup', this.fnOnPointerUp); // Releasing the mouse\n\n      this.svg.addEventListener('mouseleave', this.fnOnPointerUp); // Mouse gets out of the this.svg area\n\n      this.svg.addEventListener('mousemove', this.fnOnPointerMove); // Mouse is moving\n      // this.svg.addEventListener('touchstart', this.fnOnPointerDown); // Finger is touching the screen\n      // this.svg.addEventListener('touchend', this.fnOnPointerUp); // Finger is no longer touching the screen\n      // this.svg.addEventListener('touchmove', this.fnOnPointerMove); // Finger is moving\n    }\n  }, {\n    key: \"removePointerEventListeners\",\n    value: function removePointerEventListeners() {\n      this.svg.removeEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n\n      this.svg.removeEventListener('mouseup', this.fnOnPointerUp); // Releasing the mouse\n\n      this.svg.removeEventListener('mouseleave', this.fnOnPointerUp); // Mouse gets out of the this.svg area\n\n      this.svg.removeEventListener('mousemove', this.fnOnPointerMove); // Mouse is moving\n      // Add all touch events listeners fallback\n      // this.svg.removeEventListener('touchstart', this.fnOnPointerDown); // Finger is touching the screen\n      // this.svg.removeEventListener('touchend', this.fnOnPointerUp); // Finger is no longer touching the screen\n      // this.svg.removeEventListener('touchmove', this.fnOnPointerMove); // Finger is moving\n    }\n  }, {\n    key: \"addWheelEventListener\",\n    value: function addWheelEventListener() {\n      this.svg.addEventListener('wheel', this.fnWheel);\n    }\n  }, {\n    key: \"removeWheelEventListener\",\n    value: function removeWheelEventListener() {\n      this.svg.removeEventListener('wheel', this.fnWheel);\n    }\n  }, {\n    key: \"onWheel\",\n    value: function onWheel(e) {\n      e.preventDefault();\n\n      if (this.state === BoardState.PAN) {\n        var scale = e.deltaY > 0 ? 1.05 : 0.95;\n        this.strokeStyle.width = this.strokeStyle.width * scale;\n        var point = this.getPointerPosition(e);\n        this.transform.onWheel(point, this.viewBox, scale);\n        this.scale *= scale;\n      }\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(e) {\n      e.preventDefault();\n      var point = this.getPointerPosition(e);\n\n      switch (this.state) {\n        case BoardState.DRAW:\n          {\n            this.draw.onPointerDown(point, this.strokeStyle);\n            break;\n          }\n\n        case BoardState.PAN:\n          {\n            this.transform.onPointerDown(point);\n            break;\n          }\n\n        default:\n          {\n            throw new Error('No state ' + this.state + ' in onPointerDown');\n          }\n      }\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(e) {\n      e.preventDefault();\n      var point = this.getPointerPosition(e);\n\n      switch (this.state) {\n        case BoardState.DRAW:\n          {\n            this.draw.onPointerMove(point, this.strokeStyle.bufferSize);\n            break;\n          }\n\n        case BoardState.PAN:\n          {\n            this.transform.onPointerMove(point, this.viewBox, this.scale);\n            break;\n          }\n\n        default:\n          {\n            throw new Error('Not state ' + this.state + ' in onPointerMove');\n          }\n      }\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp() {\n      switch (this.state) {\n        case BoardState.DRAW:\n          {\n            this.draw.onPointerUp();\n            break;\n          }\n\n        case BoardState.PAN:\n          {\n            this.transform.onPointerUp();\n            break;\n          }\n\n        default:\n          {\n            throw new Error('Not state ' + this.state + ' in onPointerUp');\n          }\n      }\n    }\n  }, {\n    key: \"getPointerPosition\",\n    value: function getPointerPosition(e) {\n      var svgPoint = this.svg.createSVGPoint();\n      svgPoint.x = e.clientX;\n      svgPoint.y = e.clientY; // Null check is done in constructor\n\n      return svgPoint.matrixTransform(this.svg.getScreenCTM().inverse());\n    }\n  }]);\n\n  return Controller;\n}();",{"version":3,"sources":["/home/holwech/code/draw/src/draw/Controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { SVGDraw } from './SVGDraw';\nimport { Transform } from './Transform';\nimport { IStrokeStyle, IViewBox } from './interfaces';\n\nenum BoardState {\n  DRAW = 'DRAW',\n  PAN = 'PAN',\n}\n\nexport class Controller {\n  // Event listeners\n  private fnWheel: (e: WheelEvent) => void;\n  private fnOnPointerDown: (e: MouseEvent) => void;\n  private fnOnPointerUp: (e: MouseEvent) => void;\n  private fnOnPointerMove: (e: MouseEvent) => void;\n\n  // State properties\n  private scale = 1;\n  private state = BoardState.DRAW;\n  private strokeStyle: IStrokeStyle;\n  private viewBox: IViewBox;\n\n  private svg: HTMLElement & SVGElement & SVGSVGElement;\n  private draw: SVGDraw;\n  private transform: Transform;\n\n  constructor(svgID: string, style: IStrokeStyle) {\n    this.svg = document.getElementById(svgID) as any as HTMLElement & SVGElement & SVGSVGElement;\n    this.draw = new SVGDraw(this.svg);\n    this.transform = new Transform(this.svg);\n    this.strokeStyle = style;\n\n    if (!this.svg.getScreenCTM()) {\n      throw new Error('m variable is not defined in getPointFromViewBox in Transform');\n    }\n\n    const viewboxElem = this.svg.getAttributeNS(null, 'viewBox');\n    if (viewboxElem !== null) {\n      const arr = viewboxElem.split(' ').map(Number);\n      this.viewBox = { x: arr[0], y: arr[1], width: arr[2], height: arr[3] };\n    } else {\n      throw new Error('The SVG element requires the view box attribute to be set.');\n    }\n\n    // Event listeners\n    this.fnWheel = this.onWheel.bind(this);\n    this.fnOnPointerDown = this.onPointerDown.bind(this);\n    this.fnOnPointerUp = this.onPointerUp.bind(this);\n    this.fnOnPointerMove = this.onPointerMove.bind(this);\n\n    this.addAllEventListeners();\n  }\n\n  public togglePan(toggle: boolean) {\n    if (toggle) {\n      this.state = BoardState.PAN;\n    } else {\n      this.state = BoardState.DRAW;\n    }\n  }\n\n  public clear() {\n    this.draw.clear();\n  }\n\n  public setStrokeProperties(color: string, smoothness: number, width: number) {\n    this.strokeStyle.bufferSize = smoothness;\n    this.strokeStyle.color = color;\n    this.strokeStyle.width = width * this.scale;\n  }\n\n  private addAllEventListeners() {\n    this.addPointerEventListeners();\n    this.addWheelEventListener();\n  }\n\n  private removeAllEventListeners() {\n    this.removePointerEventListeners();\n    this.removeWheelEventListener();\n  }\n\n  private addPointerEventListeners() {\n    this.svg.addEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n    this.svg.addEventListener('mouseup', this.fnOnPointerUp); // Releasing the mouse\n    this.svg.addEventListener('mouseleave', this.fnOnPointerUp); // Mouse gets out of the this.svg area\n    this.svg.addEventListener('mousemove', this.fnOnPointerMove); // Mouse is moving\n\n    // this.svg.addEventListener('touchstart', this.fnOnPointerDown); // Finger is touching the screen\n    // this.svg.addEventListener('touchend', this.fnOnPointerUp); // Finger is no longer touching the screen\n    // this.svg.addEventListener('touchmove', this.fnOnPointerMove); // Finger is moving\n  }\n\n  private removePointerEventListeners() {\n    this.svg.removeEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n    this.svg.removeEventListener('mouseup', this.fnOnPointerUp); // Releasing the mouse\n    this.svg.removeEventListener('mouseleave', this.fnOnPointerUp); // Mouse gets out of the this.svg area\n    this.svg.removeEventListener('mousemove', this.fnOnPointerMove); // Mouse is moving\n\n    // Add all touch events listeners fallback\n    // this.svg.removeEventListener('touchstart', this.fnOnPointerDown); // Finger is touching the screen\n    // this.svg.removeEventListener('touchend', this.fnOnPointerUp); // Finger is no longer touching the screen\n    // this.svg.removeEventListener('touchmove', this.fnOnPointerMove); // Finger is moving\n  }\n\n  private addWheelEventListener() {\n    this.svg.addEventListener('wheel', this.fnWheel);\n  }\n\n  private removeWheelEventListener() {\n    this.svg.removeEventListener('wheel', this.fnWheel);\n  }\n\n  private onWheel(e: WheelEvent) {\n    e.preventDefault();\n    if (this.state === BoardState.PAN) {\n      const scale = e.deltaY > 0 ? 1.05 : 0.95;\n      this.strokeStyle.width = this.strokeStyle.width * scale;\n      const point = this.getPointerPosition(e);\n      this.transform.onWheel(point, this.viewBox, scale);\n      this.scale *= scale;\n    }\n  }\n\n  private onPointerDown(e: MouseEvent) {\n    e.preventDefault();\n    const point = this.getPointerPosition(e);\n    switch (this.state) {\n      case BoardState.DRAW: {\n        this.draw.onPointerDown(point, this.strokeStyle);\n        break;\n      }\n      case BoardState.PAN: {\n        this.transform.onPointerDown(point);\n        break;\n      }\n      default: {\n        throw new Error('No state ' + this.state + ' in onPointerDown');\n      }\n    }\n  }\n\n  private onPointerMove(e: MouseEvent) {\n    e.preventDefault();\n    const point = this.getPointerPosition(e);\n    switch (this.state) {\n      case BoardState.DRAW: {\n        this.draw.onPointerMove(point, this.strokeStyle.bufferSize);\n        break;\n      }\n      case BoardState.PAN: {\n        this.transform.onPointerMove(point, this.viewBox, this.scale);\n        break;\n      }\n      default: {\n        throw new Error('Not state ' + this.state + ' in onPointerMove');\n      }\n    }\n  }\n\n  private onPointerUp() {\n    switch (this.state) {\n      case BoardState.DRAW: {\n        this.draw.onPointerUp();\n        break;\n      }\n      case BoardState.PAN: {\n        this.transform.onPointerUp();\n        break;\n      }\n      default: {\n        throw new Error('Not state ' + this.state + ' in onPointerUp');\n      }\n    }\n  }\n\n  private getPointerPosition(e: MouseEvent | WheelEvent): DOMPoint {\n    const svgPoint = this.svg.createSVGPoint();\n    svgPoint.x = e.clientX;\n    svgPoint.y = e.clientY;\n    // Null check is done in constructor\n    return svgPoint.matrixTransform(\n      (this.svg.getScreenCTM() as DOMMatrix).inverse(),\n    );\n  }\n}\n"],"sourceRoot":""}]}