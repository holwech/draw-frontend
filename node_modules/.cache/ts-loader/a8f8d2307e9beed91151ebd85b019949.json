{"remainingRequest":"/home/holwech/code/draw/node_modules/babel-loader/lib/index.js!/home/holwech/code/draw/node_modules/ts-loader/index.js??ref--13-2!/home/holwech/code/draw/src/draw/SVGDraw.ts","dependencies":[{"path":"/home/holwech/code/draw/src/draw/SVGDraw.ts","mtime":1548591269979},{"path":"/home/holwech/code/draw/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/ts-loader/index.js","mtime":1540965372000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.bind\";\nimport _classCallCheck from \"/home/holwech/code/draw/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/holwech/code/draw/node_modules/@babel/runtime/helpers/esm/createClass\";\nexport var SVGDraw =\n/*#__PURE__*/\nfunction () {\n  function SVGDraw(svgID) {\n    _classCallCheck(this, SVGDraw);\n\n    this.strokeColor = 'black';\n    this.strokeWidth = '2';\n    this.bufferSize = '8';\n    this.path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    this.pathStarted = false;\n    this.buffer = [];\n    this.fnMouseDownDraw = this.mouseDownDraw.bind(this);\n    this.fnMouseMoveDraw = this.mouseMoveDraw.bind(this);\n    this.fnMouseUpDraw = this.mouseUpDraw.bind(this);\n    this.svg = document.getElementById(svgID);\n    this.rect = this.svg.getBoundingClientRect();\n    var viewbox;\n    var viewboxElem = this.svg.getAttributeNS(null, 'viewBox');\n\n    if (viewboxElem !== null) {\n      viewbox = viewboxElem.split(' ');\n    } else {\n      throw new Error('The SVG element requires the view box attribute to be set.');\n    }\n\n    this.toggleDrawEventListners(true);\n  }\n\n  _createClass(SVGDraw, [{\n    key: \"togglePanMode\",\n    value: function togglePanMode(toggle) {\n      if (toggle) {\n        this.toggleDrawEventListners(false);\n      } else {\n        this.toggleDrawEventListners(true);\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var lastChild = this.svg.lastChild;\n\n      while (lastChild) {\n        this.svg.removeChild(lastChild);\n        lastChild = this.svg.lastChild;\n      }\n    }\n  }, {\n    key: \"setStrokeProperties\",\n    value: function setStrokeProperties(color, smoothness, width) {\n      this.bufferSize = smoothness;\n      this.strokeColor = color;\n      this.strokeWidth = width;\n    }\n  }, {\n    key: \"toggleDrawEventListners\",\n    value: function toggleDrawEventListners(toggle) {\n      if (toggle) {\n        this.svg.addEventListener('mousedown', this.fnMouseDownDraw);\n        this.svg.addEventListener('mousemove', this.fnMouseMoveDraw);\n        this.svg.addEventListener('mouseup', this.fnMouseUpDraw);\n      } else {\n        console.log('listeners off');\n        this.svg.removeEventListener('mousedown', this.fnMouseDownDraw);\n        this.svg.removeEventListener('mousemove', this.fnMouseMoveDraw);\n        this.svg.removeEventListener('mouseup', this.fnMouseUpDraw);\n      }\n    }\n  }, {\n    key: \"mouseDownDraw\",\n    value: function mouseDownDraw(e) {\n      this.pathStarted = true;\n      this.path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n      this.path.setAttribute('fill', 'none');\n      this.path.setAttribute('stroke', this.strokeColor);\n      this.path.setAttribute('stroke-width', this.strokeWidth);\n      this.buffer = [];\n      var pt = this.getMousePosition(e);\n      this.appendToBuffer(pt);\n      this.strPath = 'M' + pt.x + ' ' + pt.y;\n      this.path.setAttribute('d', this.strPath);\n      this.svg.appendChild(this.path);\n    }\n  }, {\n    key: \"getMousePosition\",\n    value: function getMousePosition(e) {\n      return {\n        x: e.pageX - this.rect.left,\n        y: e.pageY - this.rect.top\n      };\n    }\n  }, {\n    key: \"appendToBuffer\",\n    value: function appendToBuffer(pt) {\n      this.buffer.push(pt);\n\n      while (this.buffer.length > Number(this.bufferSize)) {\n        this.buffer.shift();\n      }\n    }\n  }, {\n    key: \"mouseMoveDraw\",\n    value: function mouseMoveDraw(e) {\n      if (this.pathStarted) {\n        this.appendToBuffer(this.getMousePosition(e));\n        this.updateSVGPath();\n      }\n    }\n  }, {\n    key: \"getAveragePoint\",\n    value: function getAveragePoint(offset) {\n      var len = this.buffer.length;\n\n      if (len % 2 === 1 || len >= Number(this.bufferSize)) {\n        var totalX = 0;\n        var totalY = 0;\n        var pt = {\n          x: 0,\n          y: 0\n        };\n        var count = 0;\n\n        for (var i = offset; i < len; i++) {\n          count++;\n          pt = this.buffer[i];\n          totalX += pt.x;\n          totalY += pt.y;\n        }\n\n        return {\n          x: totalX / count,\n          y: totalY / count\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"updateSVGPath\",\n    value: function updateSVGPath() {\n      var pt = this.getAveragePoint(0);\n\n      if (pt) {\n        this.strPath += ' L' + pt.x + ' ' + pt.y;\n        var tempPath = '';\n\n        for (var offset = 2; offset < this.buffer.length; offset += 2) {\n          pt = this.getAveragePoint(offset);\n          tempPath += ' L' + pt.x + ' ' + pt.y;\n        }\n\n        this.path.setAttribute('d', this.strPath + tempPath);\n      }\n    }\n  }, {\n    key: \"mouseUpDraw\",\n    value: function mouseUpDraw() {\n      if (this.pathStarted) {\n        this.pathStarted = false;\n      }\n    }\n  }]);\n\n  return SVGDraw;\n}();",{"version":3,"sources":["/home/holwech/code/draw/src/draw/SVGDraw.ts"],"names":[],"mappings":";;;;;AAKA,WAAa,OAAb;AAAA;AAAA;AAcE,mBAAY,KAAZ,EAAyB;AAAA;;AAbjB,SAAA,WAAA,GAAc,OAAd;AACA,SAAA,WAAA,GAAc,GAAd;AACA,SAAA,UAAA,GAAa,GAAb;AAGA,SAAA,IAAA,GAAuB,QAAQ,CAAC,eAAT,CAAyB,4BAAzB,EAAuD,MAAvD,CAAvB;AACA,SAAA,WAAA,GAAc,KAAd;AAEA,SAAA,MAAA,GAAkB,EAAlB;AAMN,SAAK,eAAL,GAAuB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAvB;AACA,SAAK,eAAL,GAAuB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAvB;AACA,SAAK,aAAL,GAAqB,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAArB;AACA,SAAK,GAAL,GAAW,QAAQ,CAAC,cAAT,CAAwB,KAAxB,CAAX;AACA,SAAK,IAAL,GAAY,KAAK,GAAL,CAAS,qBAAT,EAAZ;AACA,QAAI,OAAJ;AACA,QAAM,WAAW,GAAG,KAAK,GAAL,CAAS,cAAT,CAAwB,IAAxB,EAA8B,SAA9B,CAApB;;AACA,QAAI,WAAW,KAAK,IAApB,EAA0B;AACxB,MAAA,OAAO,GAAG,WAAW,CAAC,KAAZ,CAAkB,GAAlB,CAAV;AACD,KAFD,MAEO;AACL,YAAM,IAAI,KAAJ,CAAU,4DAAV,CAAN;AACD;;AACD,SAAK,uBAAL,CAA6B,IAA7B;AACD;;AA5BH;AAAA;AAAA,kCA8BuB,MA9BvB,EA8BsC;AAClC,UAAI,MAAJ,EAAY;AACV,aAAK,uBAAL,CAA6B,KAA7B;AACD,OAFD,MAEO;AACL,aAAK,uBAAL,CAA6B,IAA7B;AACD;AACF;AApCH;AAAA;AAAA,4BAsCc;AACV,UAAI,SAAS,GAAG,KAAK,GAAL,CAAS,SAAzB;;AACA,aAAO,SAAP,EAAkB;AAChB,aAAK,GAAL,CAAS,WAAT,CAAqB,SAArB;AACA,QAAA,SAAS,GAAG,KAAK,GAAL,CAAS,SAArB;AACD;AACF;AA5CH;AAAA;AAAA,wCA8C6B,KA9C7B,EA8C4C,UA9C5C,EA8CgE,KA9ChE,EA8C6E;AACzE,WAAK,UAAL,GAAkB,UAAlB;AACA,WAAK,WAAL,GAAmB,KAAnB;AACA,WAAK,WAAL,GAAmB,KAAnB;AACD;AAlDH;AAAA;AAAA,4CAoDiC,MApDjC,EAoDgD;AAC5C,UAAI,MAAJ,EAAY;AACV,aAAK,GAAL,CAAS,gBAAT,CAA0B,WAA1B,EAAuC,KAAK,eAA5C;AACA,aAAK,GAAL,CAAS,gBAAT,CAA0B,WAA1B,EAAuC,KAAK,eAA5C;AACA,aAAK,GAAL,CAAS,gBAAT,CAA0B,SAA1B,EAAqC,KAAK,aAA1C;AACD,OAJD,MAIO;AACL,QAAA,OAAO,CAAC,GAAR,CAAY,eAAZ;AACA,aAAK,GAAL,CAAS,mBAAT,CAA6B,WAA7B,EAA0C,KAAK,eAA/C;AACA,aAAK,GAAL,CAAS,mBAAT,CAA6B,WAA7B,EAA0C,KAAK,eAA/C;AACA,aAAK,GAAL,CAAS,mBAAT,CAA6B,SAA7B,EAAwC,KAAK,aAA7C;AACD;AACF;AA/DH;AAAA;AAAA,kCAiEwB,CAjExB,EAiEqC;AACjC,WAAK,WAAL,GAAmB,IAAnB;AACA,WAAK,IAAL,GAAY,QAAQ,CAAC,eAAT,CAAyB,4BAAzB,EAAuD,MAAvD,CAAZ;AACA,WAAK,IAAL,CAAU,YAAV,CAAuB,MAAvB,EAA+B,MAA/B;AACA,WAAK,IAAL,CAAU,YAAV,CAAuB,QAAvB,EAAiC,KAAK,WAAtC;AACA,WAAK,IAAL,CAAU,YAAV,CAAuB,cAAvB,EAAuC,KAAK,WAA5C;AACA,WAAK,MAAL,GAAc,EAAd;AACA,UAAM,EAAE,GAAU,KAAK,gBAAL,CAAsB,CAAtB,CAAlB;AACA,WAAK,cAAL,CAAoB,EAApB;AACA,WAAK,OAAL,GAAe,MAAM,EAAE,CAAC,CAAT,GAAa,GAAb,GAAmB,EAAE,CAAC,CAArC;AACA,WAAK,IAAL,CAAU,YAAV,CAAuB,GAAvB,EAA4B,KAAK,OAAjC;AACA,WAAK,GAAL,CAAS,WAAT,CAAqB,KAAK,IAA1B;AACD;AA7EH;AAAA;AAAA,qCA+E2B,CA/E3B,EA+EwC;AACpC,aAAO;AACL,QAAA,CAAC,EAAE,CAAC,CAAC,KAAF,GAAU,KAAK,IAAL,CAAU,IADlB;AAEL,QAAA,CAAC,EAAE,CAAC,CAAC,KAAF,GAAU,KAAK,IAAL,CAAU;AAFlB,OAAP;AAID;AApFH;AAAA;AAAA,mCAsFyB,EAtFzB,EAsFkC;AAC9B,WAAK,MAAL,CAAY,IAAZ,CAAiB,EAAjB;;AACA,aAAO,KAAK,MAAL,CAAY,MAAZ,GAAqB,MAAM,CAAC,KAAK,UAAN,CAAlC,EAAqD;AACnD,aAAK,MAAL,CAAY,KAAZ;AACD;AACF;AA3FH;AAAA;AAAA,kCA6FwB,CA7FxB,EA6FqC;AACjC,UAAI,KAAK,WAAT,EAAsB;AACpB,aAAK,cAAL,CAAoB,KAAK,gBAAL,CAAsB,CAAtB,CAApB;AACA,aAAK,aAAL;AACD;AACF;AAlGH;AAAA;AAAA,oCAoG0B,MApG1B,EAoGwC;AACpC,UAAM,GAAG,GAAG,KAAK,MAAL,CAAY,MAAxB;;AACA,UAAI,GAAG,GAAG,CAAN,KAAY,CAAZ,IAAiB,GAAG,IAAI,MAAM,CAAC,KAAK,UAAN,CAAlC,EAAqD;AACnD,YAAI,MAAM,GAAG,CAAb;AACA,YAAI,MAAM,GAAG,CAAb;AACA,YAAI,EAAE,GAAU;AACd,UAAA,CAAC,EAAE,CADW;AAEd,UAAA,CAAC,EAAE;AAFW,SAAhB;AAIA,YAAI,KAAK,GAAG,CAAZ;;AACA,aAAK,IAAI,CAAC,GAAG,MAAb,EAAqB,CAAC,GAAG,GAAzB,EAA8B,CAAC,EAA/B,EAAmC;AACjC,UAAA,KAAK;AACL,UAAA,EAAE,GAAG,KAAK,MAAL,CAAY,CAAZ,CAAL;AACA,UAAA,MAAM,IAAI,EAAE,CAAC,CAAb;AACA,UAAA,MAAM,IAAI,EAAE,CAAC,CAAb;AACD;;AACD,eAAO;AACL,UAAA,CAAC,EAAE,MAAM,GAAG,KADP;AAEL,UAAA,CAAC,EAAE,MAAM,GAAG;AAFP,SAAP;AAID;;AACD,aAAO,IAAP;AACD;AA1HH;AAAA;AAAA,oCA4HuB;AACnB,UAAI,EAAE,GAAiB,KAAK,eAAL,CAAqB,CAArB,CAAvB;;AACA,UAAI,EAAJ,EAAQ;AACN,aAAK,OAAL,IAAgB,OAAO,EAAG,CAAC,CAAX,GAAe,GAAf,GAAqB,EAAG,CAAC,CAAzC;AACA,YAAI,QAAQ,GAAG,EAAf;;AACA,aAAK,IAAI,MAAM,GAAG,CAAlB,EAAqB,MAAM,GAAG,KAAK,MAAL,CAAY,MAA1C,EAAkD,MAAM,IAAI,CAA5D,EAA+D;AAC7D,UAAA,EAAE,GAAG,KAAK,eAAL,CAAqB,MAArB,CAAL;AACA,UAAA,QAAQ,IAAI,OAAO,EAAG,CAAC,CAAX,GAAe,GAAf,GAAqB,EAAG,CAAC,CAArC;AACD;;AACD,aAAK,IAAL,CAAU,YAAV,CAAuB,GAAvB,EAA4B,KAAK,OAAL,GAAe,QAA3C;AACD;AACF;AAvIH;AAAA;AAAA,kCAyIqB;AACjB,UAAI,KAAK,WAAT,EAAsB;AACpB,aAAK,WAAL,GAAmB,KAAnB;AACD;AACF;AA7IH;;AAAA;AAAA","sourcesContent":["interface Point {\n  x: number;\n  y: number;\n}\n\nexport class SVGDraw {\n  private strokeColor = 'black';\n  private strokeWidth = '2';\n  private bufferSize = '8';\n  private svg: HTMLElement & SVGElement & SVGSVGElement;\n  private rect: ClientRect;\n  private path: SVGPathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  private pathStarted = false;\n  private strPath!: string;\n  private buffer: Point[] = [];\n  private fnMouseDownDraw: (e: MouseEvent) => void;\n  private fnMouseMoveDraw: (e: MouseEvent) => void;\n  private fnMouseUpDraw: () => void;\n\n  constructor(svgID: string) {\n    this.fnMouseDownDraw = this.mouseDownDraw.bind(this);\n    this.fnMouseMoveDraw = this.mouseMoveDraw.bind(this);\n    this.fnMouseUpDraw = this.mouseUpDraw.bind(this);\n    this.svg = document.getElementById(svgID) as any as HTMLElement & SVGElement & SVGSVGElement;\n    this.rect = this.svg.getBoundingClientRect();\n    let viewbox: string[];\n    const viewboxElem = this.svg.getAttributeNS(null, 'viewBox');\n    if (viewboxElem !== null) {\n      viewbox = viewboxElem.split(' ');\n    } else {\n      throw new Error('The SVG element requires the view box attribute to be set.');\n    }\n    this.toggleDrawEventListners(true);\n  }\n\n  public togglePanMode(toggle: boolean) {\n    if (toggle) {\n      this.toggleDrawEventListners(false);\n    } else {\n      this.toggleDrawEventListners(true);\n    }\n  }\n\n  public clear() {\n    let lastChild = this.svg.lastChild;\n    while (lastChild) {\n      this.svg.removeChild(lastChild);\n      lastChild = this.svg.lastChild;\n    }\n  }\n\n  public setStrokeProperties(color: string, smoothness: string, width: string) {\n    this.bufferSize = smoothness;\n    this.strokeColor = color;\n    this.strokeWidth = width;\n  }\n\n  public toggleDrawEventListners(toggle: boolean) {\n    if (toggle) {\n      this.svg.addEventListener('mousedown', this.fnMouseDownDraw);\n      this.svg.addEventListener('mousemove', this.fnMouseMoveDraw);\n      this.svg.addEventListener('mouseup', this.fnMouseUpDraw);\n    } else {\n      console.log('listeners off');\n      this.svg.removeEventListener('mousedown', this.fnMouseDownDraw);\n      this.svg.removeEventListener('mousemove', this.fnMouseMoveDraw);\n      this.svg.removeEventListener('mouseup', this.fnMouseUpDraw);\n    }\n  }\n\n  private mouseDownDraw(e: MouseEvent) {\n    this.pathStarted = true;\n    this.path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    this.path.setAttribute('fill', 'none');\n    this.path.setAttribute('stroke', this.strokeColor);\n    this.path.setAttribute('stroke-width', this.strokeWidth);\n    this.buffer = [];\n    const pt: Point = this.getMousePosition(e);\n    this.appendToBuffer(pt);\n    this.strPath = 'M' + pt.x + ' ' + pt.y;\n    this.path.setAttribute('d', this.strPath);\n    this.svg.appendChild(this.path);\n  }\n\n  private getMousePosition(e: MouseEvent) {\n    return {\n      x: e.pageX - this.rect.left,\n      y: e.pageY - this.rect.top,\n    };\n  }\n\n  private appendToBuffer(pt: Point) {\n    this.buffer.push(pt);\n    while (this.buffer.length > Number(this.bufferSize)) {\n      this.buffer.shift();\n    }\n  }\n\n  private mouseMoveDraw(e: MouseEvent) {\n    if (this.pathStarted) {\n      this.appendToBuffer(this.getMousePosition(e));\n      this.updateSVGPath();\n    }\n  }\n\n  private getAveragePoint(offset: number) {\n    const len = this.buffer.length;\n    if (len % 2 === 1 || len >= Number(this.bufferSize)) {\n      let totalX = 0;\n      let totalY = 0;\n      let pt: Point = {\n        x: 0,\n        y: 0,\n      };\n      let count = 0;\n      for (let i = offset; i < len; i++) {\n        count++;\n        pt = this.buffer[i];\n        totalX += pt.x;\n        totalY += pt.y;\n      }\n      return {\n        x: totalX / count,\n        y: totalY / count,\n      };\n    }\n    return null;\n  }\n\n  private updateSVGPath() {\n    let pt: Point | null = this.getAveragePoint(0);\n    if (pt) {\n      this.strPath += ' L' + pt!.x + ' ' + pt!.y;\n      let tempPath = '';\n      for (let offset = 2; offset < this.buffer.length; offset += 2) {\n        pt = this.getAveragePoint(offset);\n        tempPath += ' L' + pt!.x + ' ' + pt!.y;\n      }\n      this.path.setAttribute('d', this.strPath + tempPath);\n    }\n  }\n\n  private mouseUpDraw() {\n    if (this.pathStarted) {\n      this.pathStarted = false;\n    }\n  }\n}\n"],"sourceRoot":""}]}