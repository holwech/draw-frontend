{"remainingRequest":"/home/holwech/code/draw/node_modules/babel-loader/lib/index.js!/home/holwech/code/draw/node_modules/ts-loader/index.js??ref--13-2!/home/holwech/code/draw/src/draw/Transform.ts","dependencies":[{"path":"/home/holwech/code/draw/src/draw/Transform.ts","mtime":1548592228889},{"path":"/home/holwech/code/draw/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/holwech/code/draw/node_modules/ts-loader/index.js","mtime":1540965372000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.function.bind\";\nimport _classCallCheck from \"/home/holwech/code/draw/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/holwech/code/draw/node_modules/@babel/runtime/helpers/esm/createClass\";\nexport var Transform =\n/*#__PURE__*/\nfunction () {\n  function Transform(svgID) {\n    _classCallCheck(this, Transform);\n\n    this.isPointerDown = false;\n    this.pointerOrigin = {\n      x: 0,\n      y: 0\n    };\n    this.viewBox = {\n      x: 0,\n      y: 0,\n      width: 500,\n      height: 500\n    };\n    this.newViewBox = {\n      x: 0,\n      y: 0\n    };\n    this.scale = 1;\n    this.fnOnPointerDown = this.onPointerDown.bind(this);\n    this.fnOnPointerUp = this.onPointerUp.bind(this);\n    this.fnOnPointerMove = this.onPointerMove.bind(this);\n    this.fnSetRatio = this.setRatio.bind(this);\n    this.fnWheel = this.setZoom.bind(this);\n    this.svg = document.getElementById(svgID);\n    var viewboxElem = this.svg.getAttributeNS(null, 'viewBox');\n\n    if (viewboxElem !== null) {\n      var arr = viewboxElem.split(' ').map(Number);\n      this.viewBox = {\n        x: arr[0],\n        y: arr[1],\n        width: arr[2],\n        height: arr[3]\n      };\n    } else {\n      throw new Error('The SVG element requires the view box attribute to be set.');\n    }\n\n    this.ratio = this.viewBox.width / this.svg.getBoundingClientRect().width;\n    this.togglePanEventListeners(false);\n  }\n\n  _createClass(Transform, [{\n    key: \"togglePanEventListeners\",\n    value: function togglePanEventListeners(toggle) {\n      if (toggle) {\n        this.svg.addEventListener('resize', this.fnSetRatio);\n        this.svg.addEventListener('wheel', this.fnWheel);\n        this.svg.addEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n\n        this.svg.addEventListener('mouseup', this.fnOnPointerUp); // Releasing the mouse\n\n        this.svg.addEventListener('mouseleave', this.fnOnPointerUp); // Mouse gets out of the this.svg area\n\n        this.svg.addEventListener('mousemove', this.fnOnPointerMove); // Mouse is moving\n\n        this.svg.addEventListener('touchstart', this.fnOnPointerDown); // Finger is touching the screen\n\n        this.svg.addEventListener('touchend', this.fnOnPointerUp); // Finger is no longer touching the screen\n\n        this.svg.addEventListener('touchmove', this.fnOnPointerMove); // Finger is moving\n      } else {\n        this.svg.removeEventListener('resize', this.fnSetRatio);\n        this.svg.removeEventListener('wheel', this.fnWheel);\n        this.svg.removeEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n\n        this.svg.removeEventListener('mouseup', this.fnOnPointerUp); // Releasing the mouse\n\n        this.svg.removeEventListener('mouseleave', this.fnOnPointerUp); // Mouse gets out of the this.svg area\n\n        this.svg.removeEventListener('mousemove', this.fnOnPointerMove); // Mouse is moving\n        // Add all touch events listeners fallback\n\n        this.svg.removeEventListener('touchstart', this.fnOnPointerDown); // Finger is touching the screen\n\n        this.svg.removeEventListener('touchend', this.fnOnPointerUp); // Finger is no longer touching the screen\n\n        this.svg.removeEventListener('touchmove', this.fnOnPointerMove); // Finger is moving\n      }\n    }\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(e) {\n      e.preventDefault();\n      var scale = e.deltaY > 0 ? 1.1 : 0.9;\n      var mousePosition = this.getPointFromViewBox(e);\n      this.viewBox.x = this.viewBox.x - (this.viewBox.x - mousePosition.x) * scale;\n      this.viewBox.y = this.viewBox.y - (this.viewBox.y - mousePosition.y) * scale;\n      this.viewBox.width = this.viewBox.width * scale;\n      this.viewBox.height = this.viewBox.height * scale;\n      this.scale *= scale;\n      var viewBoxString = \"\".concat(this.viewBox.x, \" \").concat(this.viewBox.y, \" \").concat(this.viewBox.width, \" \").concat(this.viewBox.height);\n      this.svg.setAttribute('viewBox', viewBoxString);\n    }\n  }, {\n    key: \"setRatio\",\n    value: function setRatio() {\n      this.ratio = this.viewBox.width / this.svg.getBoundingClientRect().width;\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(e) {\n      this.isPointerDown = true;\n      this.pointerOrigin = this.getPointFromEvent(e);\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp() {\n      this.isPointerDown = false;\n      this.viewBox.x = this.newViewBox.x;\n      this.viewBox.y = this.newViewBox.y;\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(e) {\n      if (!this.isPointerDown) {\n        return;\n      }\n\n      e.preventDefault();\n      var pointerPosition = this.getPointFromEvent(e);\n      this.newViewBox.x = this.viewBox.x - (pointerPosition.x - this.pointerOrigin.x) * this.ratio * this.scale;\n      this.newViewBox.y = this.viewBox.y - (pointerPosition.y - this.pointerOrigin.y) * this.ratio * this.scale;\n      var viewBoxString = \"\".concat(this.newViewBox.x, \" \").concat(this.newViewBox.y, \" \").concat(this.viewBox.width, \" \").concat(this.viewBox.height);\n      this.svg.setAttribute('viewBox', viewBoxString);\n    }\n  }, {\n    key: \"getPointFromViewBox\",\n    value: function getPointFromViewBox(e) {\n      var m = this.svg.getScreenCTM();\n      var point = this.svg.createSVGPoint();\n      point.x = e.clientX;\n      point.y = e.clientY;\n\n      if (m) {\n        return point.matrixTransform(m.inverse());\n      } else {\n        throw new Error('m variable is not defined in getPointFromViewBox in Transform');\n      }\n    }\n  }, {\n    key: \"getPointFromEvent\",\n    value: function getPointFromEvent(e) {\n      var point = {\n        x: 0,\n        y: 0\n      };\n\n      if (window.TouchEvent && e instanceof TouchEvent) {\n        point.x = e.targetTouches[0].clientX;\n        point.y = e.targetTouches[0].clientY;\n      } else if (e instanceof MouseEvent || e instanceof WheelEvent) {\n        point.x = e.clientX;\n        point.y = e.clientY;\n      }\n\n      return point;\n    }\n  }]);\n\n  return Transform;\n}();",{"version":3,"sources":["/home/holwech/code/draw/src/draw/Transform.ts"],"names":[],"mappings":"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","sourcesContent":["interface Point {\n  x: number;\n  y: number;\n}\n\nexport class Transform {\n  private svg: SVGElement & SVGElement & SVGSVGElement;\n  private isPointerDown = false;\n  private pointerOrigin: Point = { x: 0, y: 0 };\n  private viewBox = { x: 0, y: 0, width: 500, height: 500 };\n  private newViewBox = { x: 0, y: 0 };\n  private ratio: number;\n  private fnOnPointerDown: (e: MouseEvent | TouchEvent) => void;\n  private fnOnPointerUp: (e: MouseEvent | TouchEvent) => void;\n  private fnOnPointerMove: (e: MouseEvent | TouchEvent) => void;\n  private fnWheel: (e: WheelEvent) => void;\n  private fnSetRatio: () => void;\n  private scale = 1;\n  constructor(svgID: string) {\n    this.fnOnPointerDown = this.onPointerDown.bind(this);\n    this.fnOnPointerUp = this.onPointerUp.bind(this);\n    this.fnOnPointerMove = this.onPointerMove.bind(this);\n    this.fnSetRatio = this.setRatio.bind(this);\n    this.fnWheel = this.setZoom.bind(this);\n    this.svg = document.getElementById(svgID) as any as SVGElement & SVGSVGElement & HTMLElement;\n    const viewboxElem = this.svg.getAttributeNS(null, 'viewBox');\n    if (viewboxElem !== null) {\n      const arr = viewboxElem.split(' ').map(Number);\n      this.viewBox = { x: arr[0], y: arr[1], width: arr[2], height: arr[3] };\n    } else {\n      throw new Error('The SVG element requires the view box attribute to be set.');\n    }\n    this.ratio = this.viewBox.width / this.svg.getBoundingClientRect().width;\n    this.togglePanEventListeners(false);\n  }\n\n  public togglePanEventListeners(toggle: boolean) {\n    if (toggle) {\n      this.svg.addEventListener('resize', this.fnSetRatio);\n      this.svg.addEventListener('wheel', this.fnWheel);\n\n      this.svg.addEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n      this.svg.addEventListener('mouseup', this.fnOnPointerUp); // Releasing the mouse\n      this.svg.addEventListener('mouseleave', this.fnOnPointerUp); // Mouse gets out of the this.svg area\n      this.svg.addEventListener('mousemove', this.fnOnPointerMove); // Mouse is moving\n\n      this.svg.addEventListener('touchstart', this.fnOnPointerDown); // Finger is touching the screen\n      this.svg.addEventListener('touchend', this.fnOnPointerUp); // Finger is no longer touching the screen\n      this.svg.addEventListener('touchmove', this.fnOnPointerMove); // Finger is moving\n    } else {\n      this.svg.removeEventListener('resize', this.fnSetRatio);\n      this.svg.removeEventListener('wheel', this.fnWheel);\n\n      this.svg.removeEventListener('mousedown', this.fnOnPointerDown); // Pressing the mouse\n      this.svg.removeEventListener('mouseup', this.fnOnPointerUp); // Releasing the mouse\n      this.svg.removeEventListener('mouseleave', this.fnOnPointerUp); // Mouse gets out of the this.svg area\n      this.svg.removeEventListener('mousemove', this.fnOnPointerMove); // Mouse is moving\n\n      // Add all touch events listeners fallback\n      this.svg.removeEventListener('touchstart', this.fnOnPointerDown); // Finger is touching the screen\n      this.svg.removeEventListener('touchend', this.fnOnPointerUp); // Finger is no longer touching the screen\n      this.svg.removeEventListener('touchmove', this.fnOnPointerMove); // Finger is moving\n    }\n  }\n\n  public setZoom(e: WheelEvent) {\n    e.preventDefault();\n    const scale = e.deltaY > 0 ? 1.1 : 0.9;\n    const mousePosition = this.getPointFromViewBox(e);\n    this.viewBox.x = this.viewBox.x - (this.viewBox.x - mousePosition.x) * scale;\n    this.viewBox.y = this.viewBox.y - (this.viewBox.y - mousePosition.y) * scale;\n    this.viewBox.width = this.viewBox.width * scale;\n    this.viewBox.height = this.viewBox.height * scale;\n    this.scale *= scale;\n    const viewBoxString = `${this.viewBox.x} ${this.viewBox.y} ${this.viewBox.width} ${this.viewBox.height}`;\n    this.svg.setAttribute('viewBox', viewBoxString);\n  }\n\n  private setRatio() {\n    this.ratio = this.viewBox.width / this.svg.getBoundingClientRect().width;\n  }\n\n  private onPointerDown(e: TouchEvent | MouseEvent) {\n    this.isPointerDown = true;\n    this.pointerOrigin = this.getPointFromEvent(e);\n  }\n\n  private onPointerUp() {\n    this.isPointerDown = false;\n    this.viewBox.x = this.newViewBox.x;\n    this.viewBox.y = this.newViewBox.y;\n  }\n\n  private onPointerMove(e: TouchEvent | MouseEvent) {\n    if (!this.isPointerDown) {\n      return;\n    }\n    e.preventDefault();\n\n    const pointerPosition = this.getPointFromEvent(e);\n    this.newViewBox.x = this.viewBox.x - (pointerPosition.x - this.pointerOrigin.x) * this.ratio * this.scale;\n    this.newViewBox.y = this.viewBox.y - (pointerPosition.y - this.pointerOrigin.y) * this.ratio * this.scale;\n    const viewBoxString = `${this.newViewBox.x} ${this.newViewBox.y} ${this.viewBox.width} ${this.viewBox.height}`;\n    this.svg.setAttribute('viewBox', viewBoxString);\n  }\n\n  private getPointFromViewBox(e: WheelEvent) {\n    const m = this.svg.getScreenCTM();\n    const point = this.svg.createSVGPoint();\n\n    point.x = e.clientX;\n    point.y = e.clientY;\n    if (m) {\n      return point.matrixTransform(m.inverse());\n    } else {\n      throw new Error('m variable is not defined in getPointFromViewBox in Transform');\n    }\n  }\n\n\n  private getPointFromEvent(e: TouchEvent | MouseEvent | WheelEvent) {\n    const point: Point = {x: 0, y: 0};\n    if ((window as any).TouchEvent && e instanceof TouchEvent) {\n      point.x = e.targetTouches[0].clientX;\n      point.y = e.targetTouches[0].clientY;\n    } else if (e instanceof MouseEvent || e instanceof WheelEvent) {\n      point.x = e.clientX;\n      point.y = e.clientY;\n    }\n    return point;\n  }\n}\n"],"sourceRoot":""}]}